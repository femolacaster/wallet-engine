// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: wallet.sql

package mysql

import (
	"context"
	"database/sql"
	"time"
)

const changeWalletStatus = `-- name: ChangeWalletStatus :exec
UPDATE wallets SET
  is_active = ?
WHERE id = ?
`

type ChangeWalletStatusParams struct {
	IsActive string
	ID       int64
}

func (q *Queries) ChangeWalletStatus(ctx context.Context, arg ChangeWalletStatusParams) error {
	_, err := q.db.ExecContext(ctx, changeWalletStatus, arg.IsActive, arg.ID)
	return err
}

const generateWallet = `-- name: GenerateWallet :execresult
INSERT INTO wallets (
  wallet_number,
  is_active,
  first_name,
  last_name,
  email,
  secretkey,
  bvn,
  dob,
  currency
)
VALUES (
 ?,?, ?, ?, ?, ?, ?, ?, ?
)
`

type GenerateWalletParams struct {
	WalletNumber string
	IsActive     string
	FirstName    sql.NullString
	LastName     sql.NullString
	Email        string
	Secretkey    string
	Bvn          string
	Dob          sql.NullTime
	Currency     string
}

func (q *Queries) GenerateWallet(ctx context.Context, arg GenerateWalletParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, generateWallet,
		arg.WalletNumber,
		arg.IsActive,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Secretkey,
		arg.Bvn,
		arg.Dob,
		arg.Currency,
	)
}

const insertTransaction = `-- name: InsertTransaction :execresult
INSERT INTO transactions (
  id,
  transaction_ref,
  transaction_type,
  transaction_timestamp,
  amount,
  secretkey,
  transaction_status,
  transaction_description,
  balance,
  wallet_id
)
VALUES (
  ?,?,?,?,?,?,?,?,?,?
)
`

type InsertTransactionParams struct {
	ID                     int64
	TransactionRef         string
	TransactionType        string
	TransactionTimestamp   time.Time
	Amount                 string
	Secretkey              string
	TransactionStatus      string
	TransactionDescription string
	Balance                string
	WalletID               sql.NullInt32
}

func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertTransaction,
		arg.ID,
		arg.TransactionRef,
		arg.TransactionType,
		arg.TransactionTimestamp,
		arg.Amount,
		arg.Secretkey,
		arg.TransactionStatus,
		arg.TransactionDescription,
		arg.Balance,
		arg.WalletID,
	)
}
